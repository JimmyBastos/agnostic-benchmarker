{"version":3,"sources":["App.template.jsx","store.js","App.jsx","serviceWorker.js","index.js"],"names":["_prevent","$evt","preventDefault","stopPropagation","Template","props","colors","handleAdd","handleShuffle","handleSort","handleSwap","handleUpdateColor","handleDeleteColor","handleClear","TableRows","map","_ref","id","label","color","react_default","a","createElement","key","concat","style","backgroundColor","className","padding","href","onClick","xmlns","viewBox","width","height","fill","d","length","randomColor","red","green","blue","lower","arguments","undefined","upper","_random","_currentIndex","store","Store","Object","classCallCheck","this","_colorList","createClass","value","amount","startIndex","Array","_","i","generateAmountOfColors","_shuffle","toConsumableArray","sort","next","curr","_ref2","slicedToArray","idxOne","idxTwo","size","newColorOne","newColorTwo","newColors","clr","idx","colorID","findIndex","slice","objectSpread","get","set","isArray","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","freeze","syncData","bind","assertThisInitialized","setState","appendColors","shuffleColors","sortColorsById","rows","swapColors","updateColor","deleteColor","clearColors","App_template","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee5951d1.chunk.js","sourcesContent":["import React from 'react'\nimport Types from 'prop-types'\n\nfunction _prevent ($evt) {\n  $evt.preventDefault()\n  $evt.stopPropagation()\n}\n\nconst Template = (props) => {\n  const {\n    colors,\n    handleAdd,\n    handleShuffle,\n    handleSort,\n    handleSwap,\n    handleUpdateColor,\n    handleDeleteColor,\n    handleClear\n  } = props\n\n  const TableRows = colors.map(({ id, color: label, color }) => (\n    <tr\n      key={`table-row-${id}-${color}`}\n      style={{ backgroundColor: color }}\n      className='app-table-row'\n    >\n      {/* <!-- COLOR ID --> */}\n      <td className='app-table-id'>\n        <span\n          className='app-table-label'\n          style={{ padding: '6px' }}\n        >\n          {id}\n        </span>\n      </td>\n\n      {/* <!-- COLOR LABEL --> */}\n      <td\n        className='app-table-cell'\n      >\n        <span className='app-table-label'>\n          {label}\n        </span>\n      </td>\n\n      {/* <!-- ACTION: UPDATE COLOR --> */}\n      <td className='app-table-cell app-table-action'>\n\n        <a\n          href='#update'\n          className='button__update pure-button app-button app-table-label'\n          onClick={($evt) =>{ handleUpdateColor(id); _prevent($evt) }}\n        >\n          {/* <!-- button icon --> */}\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            viewBox='0 0 51.4 51.4'\n            width='24'\n            height='24'\n          >\n            <g fill='#fff'><path d='M1.7 25.2a1 1 0 0 0 1-1c0-6.065 4.935-11 11-11h24v8.964L51.4 12.2 37.7 2.236V11.2h-24a13.02 13.02 0 0 0-13 13 1 1 0 0 0 1 1zm38-19.036L48 12.2l-8.3 6.036V6.164zm10 20.036a1 1 0 0 0-1 1c0 6.065-4.935 11-11 11h-24v-8.964L0 39.2l13.7 9.964V40.2h24a13.02 13.02 0 0 0 13-13 1 1 0 0 0-1-1zm-38 19.036L3.4 39.2l8.3-6.036v12.072z' /></g>\n          </svg>\n        </a>\n      </td>\n\n      {/* <!-- ACTION: DELETE COLOR --> */}\n\n      <td className='app-table-cell app-table-action'>\n        <a\n          href='#delete'\n          className='button__delete pure-button app-button app-table-label'\n          onClick={($evt) => { handleDeleteColor(id); _prevent($evt) }}\n        >\n          {/* <!-- button icon --> */}\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            viewBox='0 0 59 59'\n            width='24'\n            height='24'\n          >\n            <g fill='#fff'><path d='M29.5 51a1 1 0 0 0 1-1V17a1 1 0 1 0-2 0v33a1 1 0 0 0 1 1zm-10 0a1 1 0 0 0 1-1V17a1 1 0 1 0-2 0v33a1 1 0 0 0 1 1zm20 0a1 1 0 0 0 1-1V17a1 1 0 1 0-2 0v33a1 1 0 0 0 1 1zm13-45H38.456c-.1-1.25-.495-3.358-1.813-4.7C35.8.434 34.75 0 33.5 0h-10c-1.252 0-2.3.434-3.144 1.3-1.318 1.353-1.703 3.46-1.813 4.7H6.5a1 1 0 1 0 0 2h2.04l1.915 46.02c.037 1.722 1.1 4.98 4.908 4.98h28.272c3.8 0 4.87-3.257 4.907-4.958L50.46 8h2.04a1 1 0 1 0 0-2zM21.792 2.68C22.24 2.223 22.8 2 23.5 2h10c.7 0 1.26.223 1.708.68.805.823 1.128 2.27 1.24 3.32H20.553c.112-1.048.435-2.496 1.24-3.32zm24.752 51.3c-.006.3-.144 3.02-2.908 3.02H15.364c-2.734 0-2.898-2.717-2.9-3.042L10.542 8h37.915l-1.913 45.98z' /></g>\n          </svg>\n        </a>\n      </td>\n    </tr>\n  ))\n\n  return (\n    <div id='app'>\n      <header className='app-header app-u-fixed app-u-pin-t app-u-shadow-lg'>\n        {/* <!-- APP MENU --> */}\n        <div className='app-container app-menu pure-menu pure-menu-horizontal'>\n          {/* <!-- BRAND: framework@version --> */}\n          <span className='app-menu-heading pure-menu-heading app-title'>\n            React\n          </span>\n        </div>\n\n        {/* <!-- APP ACTIONS --> */}\n        <div className='app-actions'>\n          {/* <!-- GRID --> */}\n          <div className='app-wrapper app-container'>\n            {/* <!-- ADD COLOR --> */}\n            <div className='pure-u-12-24 pure-u-md-8-24 pure-u-xl-4-24'>\n              <button\n                id='button__add'\n                className='pure-button app-button'\n                style={{ backgroundColor: 'LimeGreen' }}\n                onClick={handleAdd}\n              >Inserir 1 Item</button>\n            </div>\n\n            {/* <!-- LOAD 50 COLORS --> */}\n            <div className='pure-u-12-24 pure-u-md-8-24 pure-u-xl-4-24'>\n              <button\n                id='button__populate'\n                className='pure-button app-button'\n                style={{ backgroundColor: 'DodgerBlue' }}\n                onClick={() => handleAdd(50)}\n              >Inserir 50 Itens</button>\n            </div>\n\n            {/* <!-- SWAP 2 ROWS --> */}\n            <div className='pure-u-12-24 pure-u-md-8-24 pure-u-xl-4-24'>\n              <button\n                id='button__swap'\n                className='pure-button app-button'\n                style={{ backgroundColor: 'OrangeRed' }}\n                onClick={() => handleSwap([0, colors.length - 1])}\n              >Permutar 2 Itens</button>\n            </div>\n\n            {/* <!-- SHUFFLE COLORS --> */}\n            <div className='pure-u-12-24 pure-u-md-8-24 pure-u-xl-4-24'>\n              <button\n                id='button__shuffle'\n                className='pure-button app-button'\n                style={{ backgroundColor: 'DarkViolet' }}\n                onClick={handleShuffle}\n              >Embaralhar Lista</button>\n            </div>\n\n            {/* <!-- SORT COLORS-- > */}\n            <div className='pure-u-12-24 pure-u-md-8-24 pure-u-xl-4-24'>\n              <button\n                id='button__sort'\n                className='pure-button app-button'\n                style={{ backgroundColor: 'FireBrick' }}\n                onClick={handleSort}\n              >Ordernar Lista</button>\n            </div >\n\n            {/* <!--CLEAR COLORS-- > */}\n            <div className='pure-u-12-24 pure-u-md-8-24 pure-u-xl-4-24'>\n              <button\n                id='button__clear'\n                className='pure-button app-button'\n                style={{ backgroundColor: 'Crimson' }}\n                onClick={handleClear}\n              >Limpar Lista</button>\n            </div >\n          </div >\n        </div >\n      </header >\n\n      {/* <!--APP TABLE-- > */}\n      <div className='app-container app-table-wrapper' >\n        <table className='app-table'>\n          <tbody className='app-table-body'>\n\n            {/* <!-- COLOR --> */}\n            {TableRows}\n          </tbody >\n        </table >\n      </div >\n    </div >\n  )\n}\n\nTemplate.propTypes = {\n  colors            : Types.array.isRequired,\n  handleAdd         : Types.func.isRequired,\n  handleShuffle     : Types.func.isRequired,\n  handleSort        : Types.func.isRequired,\n  handleSwap        : Types.func.isRequired,\n  handleUpdateColor : Types.func.isRequired,\n  handleDeleteColor : Types.func.isRequired,\n  handleClear       : Types.func.isRequired\n}\n\nexport default Template\n","import _random  from 'lodash/random'\nimport _shuffle from 'lodash/shuffle'\n\nconst rgbColorFactory = (red, green, blue) => `rgb(${red}, ${green}, ${blue})`\n\nconst randomColor = (lower = 0, upper = 255) =>\n  rgbColorFactory(\n    _random(lower, upper),\n    _random(lower, upper),\n    _random(lower, upper)\n  )\n\nlet _currentIndex = 0\n\nfunction generateAmountOfColors (amount = 1, startIndex = _currentIndex) {\n  return Array(amount).fill().map((_, i) => ({\n    id    : startIndex + (++i),\n    color : randomColor()\n  }))\n}\n\nexport class Store {\n  constructor () {\n    this._colorList = []\n  }\n\n  get colors () {\n    return this._colorList\n  }\n\n  set colors (colors) {\n    this._colorList = colors\n    if (Array.isArray(colors)) {\n      _currentIndex = this._colorList.length\n    }\n  }\n\n  appendColors (amount = 1) {\n    this.colors = [].concat(\n      generateAmountOfColors(amount),\n      this.colors\n    )\n  }\n\n  shuffleColors () {\n    this.colors = _shuffle(this.colors)\n  }\n\n  sortColorsById () {\n    this.colors = [...this.colors].sort((next, curr) => (next.id - curr.id))\n  }\n\n  swapColors ([idxOne, idxTwo]) {\n    const size = this.colors.length\n    if (size > idxOne && size > idxTwo) {\n      const newColorOne = this.colors[idxTwo]\n      const newColorTwo = this.colors[idxOne]\n      const newColors = this.colors.map((clr, idx) => (idx === idxOne) ? (newColorOne) : (idx === idxTwo ? newColorTwo : clr))\n      this.colors = newColors\n    }\n  }\n\n  deleteColor (colorID) {\n    const idx = this.colors.findIndex(clr => clr.id === +colorID)\n\n    if (~idx) {\n      this.colors = [].concat(\n        this.colors.slice(0, idx),\n        this.colors.slice(idx + 1)\n      )\n    }\n  }\n\n  updateColor (colorID) {\n    const idx = this.colors.findIndex(clr => clr.id === +colorID)\n    let newColors = [ ...this.colors ]; newColors[idx] = { ...newColors[idx], color: randomColor() }\n    this.colors = newColors\n  }\n\n  clearColors () {\n    this.colors = []\n  }\n}\n","import React, { Component } from 'react'\nimport './App.style.sass'\n\nimport Template from './App.template.jsx'\n\nimport { Store } from './store.js'\nconst store = new Store()\n\nclass App extends Component {\n  constructor () {\n    super()\n\n    this.state = {\n      colors : Object.freeze(store.colors),\n      amount : 100\n    }\n\n    this.syncData = this.syncData.bind(this)\n    this.handleAdd = this.handleAdd.bind(this)\n    this.handleShuffle = this.handleShuffle.bind(this)\n    this.handleSort = this.handleSort.bind(this)\n    this.handleSwap = this.handleSwap.bind(this)\n    this.handleUpdateColor = this.handleUpdateColor.bind(this)\n    this.handleDeleteColor = this.handleDeleteColor.bind(this)\n    this.handleClear = this.handleClear.bind(this)\n  }\n\n  syncData () {\n    this.setState({ ...this.state, colors: store.colors })\n  }\n\n  handleAdd (amount = 1) {\n    store.appendColors(amount)\n    this.syncData()\n  }\n\n  handleShuffle () {\n    store.shuffleColors()\n    this.syncData()\n  }\n\n  handleSort () {\n    store.sortColorsById()\n    this.syncData()\n  }\n\n  handleSwap (rows) {\n    store.swapColors(rows)\n    this.syncData()\n  }\n\n  handleUpdateColor (id) {\n    store.updateColor(id)\n    this.syncData()\n  }\n\n  handleDeleteColor (id) {\n    store.deleteColor(id)\n    this.syncData()\n  }\n\n  handleClear () {\n    store.clearColors()\n    this.syncData()\n  }\n\n  render () {\n    return (\n      <Template\n        colors={this.state.colors}\n        handleAdd={this.handleAdd}\n        handleShuffle={this.handleShuffle}\n        handleSort={this.handleSort}\n        handleSwap={this.handleSwap}\n        handleUpdateColor={this.handleUpdateColor}\n        handleDeleteColor={this.handleDeleteColor}\n        handleClear={this.handleClear}\n      />\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport '../node_modules/pure-css/lib/base.css'\nimport '../node_modules/pure-css/lib/buttons.css'\nimport '../node_modules/pure-css/lib/grids.css'\n\nimport './assets/styles/main.sass'\n\nimport App from './App.jsx'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}